// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Jabatan {
  id_jabatan   Int        @id @default(autoincrement())
  name_jabatan String
  created_at   DateTime   @default(now())
  update_at    DateTime   @updatedAt
  Employee     Employee[]
}

model Employee {
  id_employee   Int           @id @unique @default(autoincrement())
  name          String
  email         String
  password      String
  alamat        String
  pendidikan    Pendidikan
  tanggal_lahir DateTime
  tempat_lahir  String
  keterangan    Keterangan
  start_working DateTime
  cuti          Int?          @default(12)
  createAt      DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  id_jabatan    Int?
  jabatan       Jabatan?      @relation(fields: [id_jabatan], references: [id_jabatan])
  Project       Project[]
  DailyReport   DailyReport[]
  Presensi      Presensi[]
  overtimes     Overtimes[]
  time_off      TimeOff[]
  meeting       Meeting[]
}

enum Pendidikan {
  SMA
  D3
  S1
  S2
  S3
}

enum Keterangan {
  Karyawan
  Freelance
  Partime
  Probation
}

model Project {
  id_project   Int       @id @default(autoincrement())
  name_project String
  created_at   DateTime  @default(now())
  update_at    DateTime  @updatedAt
  id_employee  Int
  employee     Employee? @relation(fields: [id_employee], references: [id_employee])
  DailyReport DailyReport[]
}

model KeyResult {
  id_key_result Int      @id @default(autoincrement())
  key_result    String
  target        Int
  created_at    DateTime @default(now())
  update_at     DateTime @updatedAt
}

model Overtimes {
  id_overtime Int       @id @default(autoincrement())
  id_employee Int
  employee    Employee? @relation(fields: [id_employee], references: [id_employee])
  start_date  DateTime
  end_date    DateTime
  start_time  DateTime
  end_time    DateTime
  attachment  String
  status      Status    @default(pending)
  description String?
  created_at  DateTime  @default(now())
  update_at   DateTime  @updatedAt
}

enum Status {
  pending
  approved
  rejected
}

model DailyReport {
  id_daily_report Int       @id @default(autoincrement())
  id_employee     Int
  employee        Employee? @relation(fields: [id_employee], references: [id_employee])
  date            DateTime
  task            String
  status          Progres
  link            String
  id_project    Int?
  project       Project?      @relation(fields: [id_project], references: [id_project])
}

enum Progres {
  Done
  OnGoing
  Pending
}

model Presensi {
  id_presensi Int       @id @default(autoincrement())
  id_employee Int
  employee    Employee? @relation(fields: [id_employee], references: [id_employee])
  date        DateTime
  start_time  DateTime
  end_time    DateTime
}

model TimeOff {
  id_time_off Int       @id @default(autoincrement())
  id_employee Int
  employee    Employee? @relation(fields: [id_employee], references: [id_employee])
  start_date  DateTime
  end_date    DateTime
  attachment  String
  type        typeTimeOff    
  status      Status    @default(pending)
  description String?
  created_at  DateTime  @default(now())
  update_at   DateTime  @updatedAt
}

enum typeTimeOff {
  tahunan
  menikah
  melahirkan
}

model Meeting {
  id_meeting    Int     @id @default(autoincrement())
  id_employee   Int
  employee      Employee? @relation(fields: [id_employee], references: [id_employee])
  date          DateTime
  start_time    DateTime
  end_time      DateTime
  link_meeting  String
  description   String
}