// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Jabatan {
  id_jabatan   Int        @id @default(autoincrement())
  name_jabatan String
  created_at   DateTime   @default(now())
  update_at    DateTime   @updatedAt
  Employee     Employee[]
}

model Employee {
  id_employee        Int                  @id @unique @default(autoincrement())
  name               String
  email              String
  password           String
  alamat             String
  gender             JenisKelamin
  pendidikan         Pendidikan
  tanggal_lahir      DateTime
  tempat_lahir       String
  keterangan         Keterangan
  deskripsi          StatusKaryawan       @default(Aktif)
  start_working      DateTime
  cuti               Int?                 @default(12)
  createAt           DateTime             @default(now())
  updateAt           DateTime             @updatedAt
  id_jabatan         Int?
  jabatan            Jabatan?             @relation(fields: [id_jabatan], references: [id_jabatan])
  Project            Project[]
  DailyReport        DailyReport[]
  Presensi           Presensi[]
  overtimes          Overtimes[]
  time_off           TimeOff[]
  meetingEmployees   MeetingEmployee[]    @relation("EmployeeMeetings")
  assessmentEmployee AssessmentEmployee[]
}

enum JenisKelamin {
  pria
  wanita
}

enum Pendidikan {
  SMA
  D3
  S1
  S2
  S3
}

enum Keterangan {
  Karyawan
  Freelance
  Partime
  Probation
}

enum StatusKaryawan {
  Aktif
  NonAktif
}

model Project {
  id_project   Int           @id @default(autoincrement())
  name_project String
  created_at   DateTime      @default(now())
  update_at    DateTime      @updatedAt
  id_employee  Int
  employee     Employee?     @relation(fields: [id_employee], references: [id_employee])
  DailyReport  DailyReport[]
}

model KeyResult {
  id_key_result      Int                  @id @default(autoincrement())
  key_result         String
  target             Int
  created_at         DateTime             @default(now())
  update_at          DateTime             @updatedAt
  assessmentEmployee AssessmentEmployee[]
}

model Overtimes {
  id_overtime Int       @id @default(autoincrement())
  id_employee Int
  employee    Employee? @relation(fields: [id_employee], references: [id_employee])
  start_date  DateTime
  end_date    DateTime
  start_time  String
  end_time    String
  attachment  String
  status      Status    @default(pending)
  description String?
  created_at  DateTime  @default(now())
  update_at   DateTime  @updatedAt
}

enum Status {
  pending
  approved
  rejected
}

model DailyReport {
  id_daily_report Int       @id @default(autoincrement())
  id_employee     Int
  employee        Employee? @relation(fields: [id_employee], references: [id_employee])
  date            DateTime
  task            String
  status          Progres
  link            String
  created_at      DateTime  @default(now())
  update_at       DateTime  @updatedAt
  id_project      Int?
  project         Project?  @relation(fields: [id_project], references: [id_project])
}

enum Progres {
  Done
  Doing
  Todo
}

model Presensi {
  id_presensi Int       @id @default(autoincrement())
  id_employee Int
  employee    Employee? @relation(fields: [id_employee], references: [id_employee])
  date        DateTime
  start_time  String
  end_time    String
  created_at  DateTime  @default(now())
  update_at   DateTime  @updatedAt
}

model TimeOff {
  id_time_off Int         @id @default(autoincrement())
  id_employee Int
  employee    Employee?   @relation(fields: [id_employee], references: [id_employee])
  start_date  DateTime
  end_date    DateTime
  attachment  String
  type        typeTimeOff
  status      Status      @default(pending)
  description String?
  created_at  DateTime    @default(now())
  update_at   DateTime    @updatedAt
}

enum typeTimeOff {
  tahunan
  menikah
  melahirkan
}

model Meeting {
  id_meeting       Int               @id @default(autoincrement())
  date             DateTime
  start_time       String
  end_time         String
  link_meeting     String
  description      String
  meetingEmployees MeetingEmployee[] @relation("MeetingEmployees")
  created_at       DateTime          @default(now())
  update_at        DateTime          @updatedAt
}

model MeetingEmployee {
  id_meeting_employee Int      @id @default(autoincrement())
  id_meeting          Int
  id_employee         Int
  meeting             Meeting  @relation(fields: [id_meeting], references: [id_meeting], name: "MeetingEmployees")
  employee            Employee @relation(fields: [id_employee], references: [id_employee], name: "EmployeeMeetings")
}

model AssessmentEmployee {
  id_assessment Int            @id @default(autoincrement())
  id_key_result Int
  keyResult     KeyResult      @relation(fields: [id_key_result], references: [id_key_result])
  id_employee   Int
  employee      Employee       @relation(fields: [id_employee], references: [id_employee])
  type          typeAssessment
  target        Float
  realisasi     Float
  nilai_akhir   Float
  total_nilai   Float
  created_at    DateTime       @default(now())
  update_at     DateTime       @updatedAt
}

enum typeAssessment {
  should_stay_above
  shoud_stay_below
  should_increase_to
  shoud_decrease_to
  achieve_or_not
}
